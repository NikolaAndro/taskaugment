# Installation

## Dependencies
This project requires Python 3.8+ and Pytorch 1.7.1+
Using your personal environment tool (conda, venv, ....) install the requirements.txt dependencies.
Check in the requirements files that the CUDA version of your system matches the installation (or install pytorch cpu)

## COMET
Comet is free open-source library that allows to record and track experiments results using an API.
First create an account on https://www.comet.ml/ and get a new API key. Update **COMET_APIKEY** in "experiments/attacks/__init__.py" with your API key.

## DATASET
Download and prepare the Taskonomy dataset as suggested in https://github.com/columbia/MTRobust/
Update the path to the taskonomy dataset  Update **TASKONOMY_DATASET** in "experiments/attacks/__init__.py".

# Experiments

The entry script is "experiments/attacks/adv_attacks.py". Each script in "jobs/" calls it with specific parameters depending on which research question and experiment we are investigating. We provide in the following a short explanation of each of its shell arguments:

* arch: The architecture to be attacked; possible values studied in the paper are resnet18, resnet50, xception, wresnet50 and resnet152
* dataset: One possible value; "taskonomy"; can be extended with additional loaders
* model_root: The folder where the pre-trained models are stored. The path can contain some parameters to be replaced dynamically:
for instance, in *~/Code/pytorch_output/{dataset}/{arch}_noW/{train}* **dataset** will be replaced with the dataset provided to the script, **arch** will be replaced with the attacked architecture and **train** will be replaced with the letters of the tasks the model is trained on.
Each model_root folder should contain a "save_checkpoint" folder where the models are stored in pytorch format.
* train_task_set: the task letters of the tasks the model has been trained on. Multiple letters can be provided separated by "+". For instance "sd+sE+sn" load and attack the model sd, then load and attack the model sE, ....
* target_task_set: tasks that are attacked in the experiment. Multiple letters can be provided separated by "+".
* step_size: The attack step size &alpha
* epoch: at which training checkpoint would we load the model in *model_root*
* epsilon: The attack size &epsilon
* test_batch_size: The size of the batch size of the attack
* steps: The number of steps of the iterative attack
* norm: The norm of the attack. The possible values are Linf or L2
* strategy: The attack strategy. For this paper we only study the "None" strategy (we attck equally the tasks)
* name: The name of the workspace in Comet where this experiment will be recorded
* metrics: The vulnerability metrics to be recorded: "" means no vulnerability metric. "vuln" will compute the first order adversarial vulnerability of the models, "vuln+hessian" computes the first and second order vulnerability of the models. *Attention: Adding the first then second order vulnerability will significantly slow down the experiments; the second order vulnerability requires much more GPU memory (>32Gb for a batch of 32 with 2 tasks)*


# Analysis:

All the experiments results are stored in COMET. You can download them as json from the website (or generate the plots directly there)
In folder *"experiments/analysis"* are the scripts to compute relative task vulnerability from the raw performances of COMET. Each subdirectory tackles a different study (number of steps, norm, epsilon, ...)



# Licence:

Copyright 2021 S.G

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
