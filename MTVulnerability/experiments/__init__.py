import pandas as pd
import json
import os
from sklearn import preprocessing
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns


base_folder = [".","output","experiments","attacks"]
default_targets = ["s","n","p","r","k","K","d","D","A","e","E"]

def heat_pivot(df, columns=["Source", "Target", "Value"], normalize=False, fig_size=(10, 10), title="", do_plot=True):
    table = df.pivot(*columns)

    if normalize:
        x = table.values  # returns a numpy array
        min_max_scaler = preprocessing.MinMaxScaler()
        x_scaled = min_max_scaler.fit_transform(x)
        table = pd.DataFrame(x_scaled, index=table.index, columns=table.columns)

    fig, ax = plt.subplots(figsize=fig_size)

    if do_plot:
        ax = sns.heatmap(table[table.columns[::-1]].round(2), annot=True, linewidths=.5, ax=ax, fmt="g")
        ax.set_title(title)
    return table[table.columns[::-1]]


def build_heat_tasks(data, nb_classes=1, title="", normalize=False, do_plot=True, absolute=False):

    k = np.array(data["target"].str.len() == nb_classes) + np.array(data["test"].str.len() == 1) if nb_classes>1 \
        else np.array(data["target"].str.len() == nb_classes)

    filtered = data[k]

    filtered.loc[filtered.measured == "s", 'values_last'] = 100 - filtered.loc[filtered.measured == "s", 'values_last']
    filtered.loc[filtered.measured == "s", 'values_first'] = 100 - filtered.loc[
        filtered.measured == "s", 'values_first']


    if absolute=="first":
        filtered["relative_change"] = filtered["values_first"]

    elif absolute=="last":
        filtered["relative_change"] = filtered["values_last"]

    else:
        filtered["relative_change"] = (filtered["values_last"] - filtered["values_first"]) / filtered["values_first"]

    test = filtered["test"].values
    measures = filtered["measured"].values
    filtered["auxillary"] = [a[1] if (a[0] == measures[i] and len(a) > 1) else a[0] for (i, a) in enumerate(test)]

    return heat_pivot(filtered, columns=["measured", "auxillary", "relative_change"], normalize=normalize, title=title, do_plot=do_plot)

def remove_classes(data, cls):
    cls = ["k","K","A","e","p","r"] if not isinstance(cls, list) else cls
    tbl = [e for e in data if all([e["test"].find(k)==-1 for k in cls])]

    return tbl

def load_json(attack="Vanilla",setting="S7_25", to_df=False, remove_cls=True, targets=default_targets, last=-1):

    all_data = []

    for target in targets:
        data = load_target_json(target, attack=attack, setting=setting, to_df=False, last=last)
        all_data = all_data + data

    if remove_cls:
        all_data = remove_classes(all_data,remove_cls)

    return pd.DataFrame(all_data) if to_df else all_data


def load(setting, attack, target, last=-1):
    path = os.path.join(*base_folder, "{setting}_{attack}_{target}.json".format(setting=setting, attack=attack,
                                                                                target=target))
    if os.path.isfile(path):
        raw_data = json.load(open(path))
        data = [{"test": e.get("name").split(" ")[0], "target": e.get("name").split(" ")[1],
                 "col3":e.get("name").split(" ")[2] if len(e.get("name").split(" "))>2 else "", "values": e.get("y"), "setting": setting, "attack": attack,
                 "values_first": e.get("y")[0],"values_last": e.get("y")[last], "measured": target,
                 "attack":"Multi-task" if len(e.get("name").split(" ")[1])==2 else "Single-task",
                 "model":"bi" if len(e.get("name").split(" ")[0])==2 else "mono"} for e in raw_data]
    else:
        data = []
    return data

def load_target_json(target, attack="Vanilla",setting="S7_25", to_df=False, last=-1):
    if attack is not None:
        all_data =  load(setting, attack, target,last)

    else:
        all_data = []
        attacks = ["Vanilla","Weighted"]
        for attack in attacks:
            all_data = all_data + load(setting, attack, target,last)

    return pd.DataFrame(all_data) if to_df else all_data

