"""
Protocol:
Setting S7: Resnet18, no-weight, 150 training epochs, steps: 25, epsilon: 4
Query:
 yamizi/robust-mtl-rq => S7_25_Vanilla  + filter resnet18
 yamizi/iccv21-adv-s10 S7_25_Vanilla + filter resnet18

1)
Run the mono-task attacks on a all 2-tasks combinations training from (s,n,p,r,k,K,d,D,A,e,E)
Compare it with baseline of same attack vs mono-task model
Study vanilla attack & weighted attack

2)
Run the two-task attacks on a all 2-tasks combinations training from (s,n,p,r,k,K,d,D,A,e,E)
Compare it with baseline of same attack vs mono-task model
Study vanilla attack & weighted attack

3) Study the difference
"""

import pandas as pd
import json
import os
from sklearn import preprocessing
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

from experiments import load_json, build_heat_tasks


def result_resnet18_W_mono_vanilla():
    data = load_json(to_df=True, setting="S10_25", attack="Vanilla")
    weighted_mono = build_heat_tasks(data, 1, title="Weighted multi-task model")

    data = load_json(to_df=True, attack="Vanilla")
    vanilla_multi = build_heat_tasks(data, 1, title="Vanilla multi-task model")

    diff = weighted_mono - vanilla_multi

    fig, ax = plt.subplots(figsize=(10, 10))
    ax = sns.heatmap(diff[diff.columns[::-1]].round(2), annot=True, linewidths=.5, ax=ax, fmt="g")
    ax.set_title('Difference of relative error betwen Weighted & Vanilla models')

    return weighted_mono

def result_resnet18_W_multi_vanilla():
    data = load_json(to_df=True, setting="S10_25", attack="Vanilla")
    weighted_multi = build_heat_tasks(data, 2, title="Weighted multi-task model")

    data = load_json(to_df=True, attack="Vanilla")
    vanilla_multi = build_heat_tasks(data, 2, title="Vanilla multi-task model")

    diff = weighted_multi - vanilla_multi

    fig, ax = plt.subplots(figsize=(10, 10))
    ax = sns.heatmap(diff[diff.columns[::-1]].round(2), annot=True, linewidths=.5, ax=ax, fmt="g")
    ax.set_title('Difference of relative error betwen Weighted & Vanilla models')

    return weighted_multi


mono = result_resnet18_W_mono_vanilla()
multi = result_resnet18_W_multi_vanilla()
plt.show()
