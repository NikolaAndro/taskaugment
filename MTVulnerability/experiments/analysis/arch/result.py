"""
Protocol:
Setting S7/S8/S9: Resnet18, no-weight, 150 training epochs, steps: 25, epsilon: 4
Query:
 yamizi/robust-mtl-rq => S7_25_Vanilla / S8_25_Vanilla_eps4 S9_25_Vanilla_eps

1)
Run the mono-task attacks on a all 2-tasks combinations training from (s,n,p,r,k,K,d,D,A,e,E)
For different architectures on the Vanilla attack

2)
Run the two-task attacks on a all 2-tasks combinations training from (s,n,p,r,k,K,d,D,A,e,E)
For different architectures on the Vanilla attack
"""

from experiments import load_json
import matplotlib.pyplot as plt
import pandas as pd

base_folder = [".","output","experiments","attacks"]
targets = ["s","n","p","r","k","K","d","D","A","e","E"]
targets = ["s","n"]

def boxplot_noW_vanilla(model="bi"):

    data_18 = load_json(to_df=True, attack="Vanilla", setting="S7_25", targets=targets)
    data_50 = load_json(to_df=True, attack="Vanilla", setting="S8_25", targets=targets)
    data_xpc = load_json(to_df=True, attack="Vanilla", setting="S9_25", targets=targets)

    filtered_18, filtered_50, filtered_xpc = data_18[data_18["model"]==model], data_50[data_50["model"]==model],data_xpc[data_xpc["model"]==model]

    filtered_xpc["arch"]="xception"
    filtered_18["arch"] = "resnet18"
    filtered_50["arch"] = "resnet50"

    filtered = pd.concat([filtered_18,filtered_50,filtered_xpc ])

    filtered.loc[filtered.measured == "s", 'values_last'] = 100 - filtered.loc[filtered.measured == "s", 'values_last']
    filtered.loc[filtered.measured == "s", 'values_first'] = 100 - filtered.loc[
        filtered.measured == "s", 'values_first']

    filtered["relative_change"] = (filtered["values_last"] - filtered["values_first"]) / filtered["values_first"]
    filtered["architecture"] = filtered["attack"] + " " + filtered["arch"]
    ax = filtered[["architecture", "relative_change"]].boxplot(by="architecture")  # ,positions=[3,0,1,2,7,4,5,6])

    from scipy.stats import wilcoxon
    f = filtered[["architecture", "relative_change"]]
    w1, p1 = wilcoxon(f[f["architecture"] == "mono resnet50"].relative_change,
                    f[f["architecture"] == "mono resnet18"].relative_change)

    for target in targets:
        filtered_target = filtered[filtered["measured"]==target]
        final = filtered_target[["architecture", "relative_change"]]
        ax = final.boxplot(by="architecture", figsize=(15,10))#,positions=[3,0,1,2,7,4,5,6])

        title = "{}".format(target)
        ax.set_title(title)

        #columns_my_order = ["mono2","mono4","mono8","mono16","bi2","bi4","bi8","bi16"]
        #fig, ax = plt.subplots()
        #for position, column in enumerate(columns_my_order):
        #    ax.boxplot(final[column], positions=[position])

    print(filtered.columns)


boxplot_noW_vanilla()

plt.show()
