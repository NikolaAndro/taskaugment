"""
Protocol:
Setting S7,S11,S12: Resnet18, no-weight, steps: 25, epsilon: 16
Query:
 yamizi/robust-mtl-rq => S7_25_Vanilla_epsilon
 yamizi/iccv21-adv => S7_25_Vanilla_epsilon

1)
Run the mono-task attacks on a all 2-tasks combinations training from (s,n,p,r,k,K,d,D,A,e,E)
For different values of epsilon on the Vanilla attack

2)
Run the two-task attacks on a all 2-tasks combinations training from (s,n,p,r,k,K,d,D,A,e,E)
For different values of epsilon on the Vanilla attack
"""
import pandas as pd
from experiments import load_json
import matplotlib.pyplot as plt
import seaborn as sns

base_folder = [".","output","experiments","attacks"]
targets = ["s","n","p","r","k","K","d","D","A","e","E"]
targets = ["s","E","d","D","n"]

targets = ["s","d","n"]

def boxplot_resnet18_noW_vanilla():

    plt.rcParams.update({'font.weight' : 'bold','font.size': 14})

    data_Linf = load_json(to_df=True, attack="Vanilla", setting="S7_25_eps", targets=targets)
    data_Linf = data_Linf[data_Linf["col3"]=="4"]
    data_Linf["norm"] = "Linf"

    data_L2 = load_json(to_df=True, attack="eps4", setting="S7_25_l2", targets=targets)
    data_L2["norm"] = "L2"

    data = pd.concat([data_Linf, data_L2])
    filtered = data[data["model"]=="bi"]
    filtered.loc[filtered.measured == "s", 'values_last'] = 100 - filtered.loc[filtered.measured == "s", 'values_last']
    filtered.loc[filtered.measured == "s", 'values_first'] = 100 - filtered.loc[
        filtered.measured == "s", 'values_first']
    filtered["relative_change"] = (filtered["values_last"] - filtered["values_first"]) / filtered["values_first"]
    filtered["model"] = filtered["attack"] + " " + filtered["norm"]

    """
    target = "all tasks"
    final = filtered[["model", "relative_change"]]
    ax = final.boxplot(by="model")#, positions=[1, 2, 0, 4, 5, 3])  # ,positions=[3,0,1,2,7,4,5,6])
    title = "relative change of error for {}".format(target)
    ax.set_title(title)
    ax = filtered[["model", "values_last"]].boxplot(by="model")#, positions=[1, 2, 0, 4, 5,

    title = "Adversarial error for {}".format(target)
    ax.set_title(title)
    """

    fig, axes = plt.subplots(nrows=1, ncols=len(targets), figsize=(10,5))

    for i, target in enumerate(targets):
        filtered_target = filtered[filtered["measured"]==target]
        final = filtered_target[["model", "relative_change"]]
        ax = final.boxplot(by="model",ax = axes[i], vert=False)#, positions=[1,2,0,4,5,3])#,positions=[3,0,1,2,7,4,5,6])
        title = "Relative Task Robustness for task {}".format(target)

        title = "Task {}".format(target)
        ax.get_figure().suptitle('')
        ax.set_title(title)
        ax.set_xlabel("")
        if i>0:
            ax.get_yaxis().set_visible(False)

        #ax = filtered_target[["model", "values_last"]].boxplot(by="model")#, positions=[1, 2, 0, 4, 5, 3])  # ,positions=[3,0,1,2,7,4,5,6])
        #title = "Adversarial error for {}".format(target)
        #ax.set_title(title)

    print(data.columns)


boxplot_resnet18_noW_vanilla()

plt.show()
