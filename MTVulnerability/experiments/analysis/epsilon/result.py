"""
Protocol:
Setting S7: Resnet18, no-weight, 150 training epochs, steps: 25, epsilon: 2,4,8
Query:
 yamizi/robust-mtl-rq => S7_25_Vanilla

1)
Run the mono-task attacks on a all 2-tasks combinations training from (s,n,p,r,k,K,d,D,A,e,E)
For different values of epsilon on the Vanilla attack

2)
Run the two-task attacks on a all 2-tasks combinations training from (s,n,p,r,k,K,d,D,A,e,E)
For different values of epsilon on the Vanilla attack
"""

from experiments import load_json
import matplotlib.pyplot as plt

base_folder = [".","output","experiments","attacks"]
targets = ["s","n","p","r","k","K","d","D","A","e","E"]
targets = ["s","E","d","D","n"]

def boxplot_resnet18_noW_vanilla():

    data = load_json(to_df=True, attack="Vanilla", setting="S7_25_eps", targets=targets)
    filtered = data[data["model"]=="bi"]
    filtered.loc[filtered.measured == "s", 'values_last'] = 100 - filtered.loc[filtered.measured == "s", 'values_last']
    filtered.loc[filtered.measured == "s", 'values_first'] = 100 - filtered.loc[
        filtered.measured == "s", 'values_first']

    filtered["relative_change"] = (filtered["values_last"] - filtered["values_first"]) / filtered["values_first"]
    for target in targets:
        filtered_target = filtered[filtered["measured"]==target]
        filtered_target["eps"] = filtered_target["attack"] +filtered_target["col3"]
        final = filtered_target[["eps", "relative_change"]]
        ax = final.boxplot(by="eps",positions=[3,0,1,2,7,4,5,6])

        title = "{}".format(target)
        ax.set_title(title)

        #columns_my_order = ["mono2","mono4","mono8","mono16","bi2","bi4","bi8","bi16"]
        #fig, ax = plt.subplots()
        #for position, column in enumerate(columns_my_order):
        #    ax.boxplot(final[column], positions=[position])

    print(data.columns)


boxplot_resnet18_noW_vanilla()

plt.show()
