"""
Protocol:
Setting S7: Resnet18, no-weight, 150 training epochs, steps: 25
Query:
 yamizi/robust-mtl-rq => S7_25_Vanilla

1)
Run the mono-task attacks on a all 2-tasks combinations training from (s,n,p,r,k,K,d,D,A,e,E)
record the values at different steps

2)
Run the two-task attacks on a all 2-tasks combinations training from (s,n,p,r,k,K,d,D,A,e,E)
record the values at different steps
"""

from experiments import load_json
import matplotlib.pyplot as plt
import pandas as pd

base_folder = [".","output","experiments","attacks"]
targets = ["s","n","p","r","k","K","d","D","A","e","E"]
targets = ["s","E","d","D","n"]
fig_size = (10,10)

def prepare(data, step):
    filtered = data[data["model"] == "bi"]
    filtered.loc[filtered.measured == "s", 'values_last'] = 100 - filtered.loc[filtered.measured == "s", 'values_last']
    filtered.loc[filtered.measured == "s", 'values_first'] = 100 - filtered.loc[
        filtered.measured == "s", 'values_first']

    filtered["relative_change"] = (filtered["values_last"] - filtered["values_first"]) / filtered["values_first"]
    filtered["step"] = " {}".format(step)
    return filtered
def boxplot_resnet18_noW_vanilla():

    data5 = load_json(to_df=True, attack="Vanilla", setting="S7_25", targets=targets, last=5)
    data15 = load_json(to_df=True, attack="Vanilla", setting="S7_25", targets=targets, last=15)
    data25 = load_json(to_df=True, attack="Vanilla", setting="S7_25", targets=targets, last=-1)

    filtered5 = prepare(data5,5)
    filtered15 = prepare(data15,15)
    filtered25 = prepare(data25,25)

    filtered= pd.concat([filtered5,filtered15,filtered25])
    filtered["step"] = filtered["attack"] + filtered["step"]

    for target in targets:
        filtered_target = filtered[filtered["measured"]==target]
        final = filtered_target[["step", "relative_change"]]

        #fig, ax = plt.subplots(figsize=fig_size)
        title = "{}".format(target)
        ax = final.boxplot(by="step",positions=[1,2,0,4,5,3])
        ax.set_title(title)

        #,positions=[2,0,1,6,3,4,5])

        #columns_my_order = ["mono2","mono4","mono8","mono16","bi2","bi4","bi8","bi16"]
        #fig, ax = plt.subplots()
        #for position, column in enumerate(columns_my_order):
        #    ax.boxplot(final[column], positions=[position])

    print(filtered.columns)


boxplot_resnet18_noW_vanilla()

plt.show()
