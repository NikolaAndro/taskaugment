"""
Protocol:
Setting S7: Resnet18, no-weight, 150 training epochs, steps: 25, epsilon: 4
Query:
 yamizi/robust-mtl-rq => S7_25_Vanilla &  S7_25_Weighted

1)
Run the mono-task attacks on a all 2-tasks combinations training from (s,n,p,r,k,K,d,D,A,e,E)
Compare it with baseline of same attack vs mono-task model
Study vanilla attack & weighted attack

2)
Run the two-task attacks on a all 2-tasks combinations training from (s,n,p,r,k,K,d,D,A,e,E)
Compare it with baseline of same attack vs mono-task model
Study vanilla attack & weighted attack
"""

import pandas as pd
import json
import os
from sklearn import preprocessing
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

base_folder = [".","output","experiments","attacks"]


def heat_pivot(df, columns=["Source", "Target", "Value"], normalize=False, fig_size=(10, 10), title=""):
    table = df.pivot(*columns)

    if normalize:
        x = table.values  # returns a numpy array
        min_max_scaler = preprocessing.MinMaxScaler()
        x_scaled = min_max_scaler.fit_transform(x)
        table = pd.DataFrame(x_scaled, index=table.index, columns=table.columns)

    fig, ax = plt.subplots(figsize=fig_size)
    ax = sns.heatmap(table[table.columns[::-1]].round(2), annot=True, linewidths=.5, ax=ax, fmt="g")
    ax.set_title(title)
    return table[table.columns[::-1]]


def build_heat_tasks(data, nb_classes=1, title=""):

    k = np.array(data["target"].str.len() == nb_classes) + np.array(data["test"].str.len() == 1) if nb_classes>1 \
        else np.array(data["target"].str.len() == nb_classes)

    filtered = data[k]

    filtered.loc[filtered.measured == "s", 'values_last'] = 100 - filtered.loc[filtered.measured == "s", 'values_last']
    filtered.loc[filtered.measured == "s", 'values_first'] = 100 - filtered.loc[
        filtered.measured == "s", 'values_first']

    filtered["relative_change"] = (filtered["values_last"] - filtered["values_first"]) / filtered["values_first"]

    test = filtered["test"].values
    measures = filtered["measured"].values
    filtered["auxillary"] = [a[1] if (a[0] == measures[i] and len(a) > 1) else a[0] for (i, a) in enumerate(test)]

    return heat_pivot(filtered, columns=["measured", "auxillary", "relative_change"], title=title)

def remove_classes(data, cls):
    cls = ["k","K","A","e","p","r"] if not isinstance(cls, list) else cls
    tbl = [e for e in data if all([e["test"].find(k)==-1 for k in cls])]

    return tbl

def load_json(attack="Vanilla",setting="S7_25", to_df=False, remove_cls=True):
    targets = ["s","n","p","r","k","K","d","D","A","e","E"]
    targets = ["s","D","d","n","E"]

    all_data = []

    for target in targets:
        data = load_target_json(target, attack=attack, setting=setting, to_df=False)
        all_data = all_data + data

    if remove_cls:
        all_data = remove_classes(all_data,remove_cls)

    return pd.DataFrame(all_data) if to_df else all_data

def load_target_json(target, attack="Vanilla",setting="S7_25", to_df=False):
    if attack is not None:
        path = os.path.join(*base_folder, "{setting}_{attack}_{target}.json".format(setting=setting, attack=attack,
                                                                                    target=target))
        raw_data = json.load(open(path))
        data = [{"test":e.get("name").split(" ")[0],"target":e.get("name").split(" ")[1],
                 "values":e.get("y"), "setting":setting, "attack":attack, "values_first":e.get("y")[0],
                     "values_last": e.get("y")[-1],"measured":target} for e in raw_data]

        all_data =  data

    else:
        all_data = []
        attacks = ["Vanilla","Weighted"]
        for attack in attacks:
            path = os.path.join(*base_folder, "{setting}_{attack}_{target}.json".format(setting=setting, attack=attack,
                                                                                        target=target))
            raw_data = json.load(open(path))
            data = [{"test": e.get("name").split(" ")[0], "target": e.get("name").split(" ")[1],
                     "values": e.get("y"), "setting":setting, "attack":attack, "values_first":e.get("y")[0],
                     "values_last": e.get("y")[-1],"measured":target} for e in raw_data]
            all_data = all_data + data

    return pd.DataFrame(all_data) if to_df else all_data

def result_resnet18_noW_mono_vanilla():

    #target = "s"
    #data = load_target_json(target)

    data = load_json(to_df=True)

    filtered = data[data["target"].str.len() ==1]

    filtered.loc[filtered.measured == "s", 'values_last'] = 100 - filtered.loc[filtered.measured == "s", 'values_last']
    filtered.loc[filtered.measured == "s", 'values_first'] = 100 - filtered.loc[filtered.measured == "s", 'values_first']

    filtered["relative_change"] = (filtered["values_last"]-filtered["values_first"]) / filtered["values_first"]

    test = filtered["test"].values
    measures = filtered["measured"].values
    filtered["auxillary"] = [a[1] if (a[0] == measures[i] and len(a)>1) else a[0] for (i, a) in enumerate(test)]

    heat_pivot(filtered, columns=["measured", "auxillary", "relative_change"])


def result_resnet18_noW_multi_vanilla():

    data = load_json(to_df=True)

    k = np.array(data["target"].str.len() == 2) + np.array(data["test"].str.len() == 1)
    filtered = data[k]

    filtered.loc[filtered.measured == "s", 'values_last'] = 100 - filtered.loc[filtered.measured == "s", 'values_last']
    filtered.loc[filtered.measured == "s", 'values_first'] = 100 - filtered.loc[filtered.measured == "s", 'values_first']

    filtered["relative_change"] = (filtered["values_last"]-filtered["values_first"]) / filtered["values_first"]

    test = filtered["test"].values
    measures = filtered["measured"].values
    filtered["auxillary"] = [a[1] if (a[0] == measures[i] and len(a) > 1) else a[0] for (i, a) in enumerate(test)]

    heat_pivot(filtered, columns=["measured", "auxillary", "relative_change"])


def result_resnet18_noW_mono_weighted():
    data = load_json(to_df=True, attack="Weighted_eps8")
    weighted_multi = build_heat_tasks(data, 1, title="Weighted mono-task adversarial attacks")

    data = load_json(to_df=True, attack="Vanilla_eps8")
    vanilla_multi = build_heat_tasks(data, 1, title="Vanilla mono-task adversarial attacks")

    diff = weighted_multi - vanilla_multi

    fig, ax = plt.subplots(figsize=(10, 10))
    ax = sns.heatmap(diff[diff.columns[::-1]].round(2), annot=True, linewidths=.5, ax=ax, fmt="g")
    ax.set_title('Difference of relative error betwen Weighted & Vanilla mono-task attacks')



def result_resnet18_noW_multi_weighted():
    data = load_json(to_df=True, attack="Weighted_eps8")
    weighted_multi = build_heat_tasks(data,2, title="Weighted multi-task adversarial attacks")

    data = load_json(to_df=True, attack="Vanilla_eps8")
    vanilla_multi = build_heat_tasks(data,2, title="Vanilla multi-task adversarial attacks")

    diff = weighted_multi - vanilla_multi

    fig, ax = plt.subplots(figsize=(10,10))
    ax = sns.heatmap(diff[diff.columns[::-1]].round(2), annot=True, linewidths=.5, ax=ax, fmt="g")
    ax.set_title('Difference of relative error betwen Weighted & Vanilla multi-task attacks')



def result_resnet18_noW_mono_cyclic():
    data = load_json(to_df=True, attack="Cyclic_eps8")
    weighted_multi = build_heat_tasks(data, 1, title="Adaptive mono-task adversarial attacks")

    data = load_json(to_df=True, attack="Vanilla_eps8")
    vanilla_multi = build_heat_tasks(data, 1, title="Vanilla mono-task adversarial attacks")

    diff = weighted_multi - vanilla_multi

    fig, ax = plt.subplots(figsize=(10, 10))
    ax = sns.heatmap(diff[diff.columns[::-1]].round(2), annot=True, linewidths=.5, ax=ax, fmt="g")
    ax.set_title('Difference of relative error betwen Weighted & Vanilla mono-task attacks')

    return weighted_multi


def result_resnet18_noW_multi_cyclic():
    data = load_json(to_df=True, attack="Cyclic_eps8")
    weighted_multi = build_heat_tasks(data,2, title="Adaptive multi-task adversarial attacks")

    data = load_json(to_df=True, attack="Vanilla_eps8")
    vanilla_multi = build_heat_tasks(data,2, title="Vanilla multi-task adversarial attacks")

    diff = weighted_multi - vanilla_multi

    fig, ax = plt.subplots(figsize=(10,10))
    ax = sns.heatmap(diff[diff.columns[::-1]].round(2), annot=True, linewidths=.5, ax=ax, fmt="g")
    ax.set_title('Difference of relative error betwen Weighted & Vanilla multi-task attacks')

    return weighted_multi

#result_resnet18_noW_mono_vanilla()
#result_resnet18_noW_multi_vanilla()
#result_resnet18_noW_mono_weighted()
#result_resnet18_noW_multi_weighted()

mono = result_resnet18_noW_mono_cyclic()
multi = result_resnet18_noW_multi_cyclic()

#multi[["s","d","D","n","E"]].reindex(["s","d","D","n","E"])

plt.show()
